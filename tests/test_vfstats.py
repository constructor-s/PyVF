"""

Copyright 2021 Bill Runjie Shi
At the Vision and Eye Movements Lab, University of Toronto.
Visit us at: http://www.eizenman.ca/

This file is part of PyVF.

PyVF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

PyVF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with PyVF. If not, see <https://www.gnu.org/licenses/>.
"""

from unittest import TestCase
import numpy as np
import pyvf.strategy.Model
import pyvf.strategy.ModelDefaults

class TestVFStats(TestCase):
    """
    Test the calculation of visual field statistics
    """
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.vf_array = np.array([[24,23,23,24,20,19,17,21,24,22,17,4,10,12,19,0,23,27,18,13,26,28,28,30,28,16,28,22,27,30,30,29,31,29,0,27,30,29,30,30,31,30,28,28,26,29,26,27,28,30,25,25,27,31],
                                  [22,19,19,19,27,24,21,25,25,25,20,26,28,27,28,24,26,25,0,24,26,28,24,28,23,17,26,9,25,28,27,31,31,29,0,23,27,26,29,28,28,22,23,20,22,26,26,25,24,17,25,25,22,15],
                                  [32,28,25,25,21,27,24,26,24,28,8,22,24,23,25,23,23,25,0,1,6,0,10,0,0,23,22,25,25,26,27,27,28,27,0,20,28,27,25,27,27,25,23,23,25,26,26,27,26,22,27,24,25,23],])
        self.age_array = np.array([53, 72, 67]).reshape(3, 1)
        self.vf = self.vf_array[0, :]
        self.age = self.age_array[0, 0]

    def test_vf_stats(self):
        # model = model_cls(age=self.age_array, gh_percentile=(46-1)/(52-1))
        model = pyvf.strategy.Model.Model(age=self.age_array, **pyvf.strategy.ModelDefaults.R_P24D2_PARAMETERS)
        vf_stats = model.get_vf_stats(vf=self.vf_array)

        nan = np.nan

        TD_TRUTH = [[-2.581506847, -4.110465459, -4.160672703, -2.732128579, -8.151031772, -10.15874175, -12.68770036, -8.737907608, -5.309363484, -6.402067992, -11.51449664, -26.00095799, -21.00866797, -19.53762658, -12.58783382, -31.1592897, -7.251994207, -1.865947347, -9.67190145, -16.63711417, -5.123575514, -4.131285493, -4.660244105, -2.710451349, -4.281907225, np.nan, -1.988564873, -6.067210287, -3.032423003, -1.518884351, -2.526594331, -4.055552943, -2.105760187, -3.677216063, np.nan, -3.383873711, 0.299576848, -2.186884499, -2.194594479, -2.723553091, -1.773760335, -2.345216211, -3.437920719, -2.051873859, -4.127575959, -2.135285939, -5.664244551, -4.714451795, -3.285907671, -0.378612179, -4.348668709, -4.877627321, -2.927834565, 1.500709559],
                    [-3.381503432, -6.968069635, -7.004576928, -6.491025309, 0.054269358, -4.082355757, -7.66892196, -3.705429253, -3.191877634, -2.128267104, -7.185295847, -2.871979873, -2.008604988, -3.595171192, -2.631678484, -6.118126865, -3.054516335, -2.440846894, -26.10019905, -4.336941984, -4.02362601, -3.160251125, -7.746817329, -3.783324622, -8.269773003, np.nan, -2.592493032, -17.47724209, -3.713985028, -2.400669054, -4.537294169, -1.123860373, -1.160367665, -2.646816047, np.nan, -5.969536075, -1.316424978, -4.003109004, -2.139734119, -3.726300323, -3.762807615, -9.249255997, -7.185645467, -8.571976025, -6.830945861, -3.967570975, -4.554137179, -5.590644472, -6.077092853, -12.01348232, -3.020804738, -3.607370942, -6.643878234, -13.13032662],
                    [6.302706196, 1.731299885, -1.308812658, -0.817631433, -6.26291515, -1.365615229, -4.93702154, -2.977134083, -4.485952858, 0.536522136, -19.53508553, -7.169079377, -6.271779456, -7.843185767, -5.88329831, -7.392117085, -6.369642091, -2.815873329, -26.51380494, -27.67909256, -24.31308641, -31.41578649, -21.9871928, -32.02730534, -31.53612411, np.nan, -6.959880358, -1.895654774, -4.06094239, -4.694936238, -4.797636317, -5.369042628, -4.409155171, -4.917973946, np.nan, -9.34173019, -0.680635024, -3.314628871, -6.417328951, -4.988735262, -5.028847805, -6.537666579, -7.515191586, -5.961422824, -4.172164307, -4.274864387, -4.846270698, -3.886383241, -4.395202015, -7.372727022, -1.370242625, -4.941648936, -3.981761479, -5.490580254],]
        self.assertTrue(np.allclose(vf_stats[[f"TD{i}" for i in range(54)]], TD_TRUTH, atol=1e-3, equal_nan=True), msg="TD testcase failed")

        TDP_TRUTH = [[95.0, 95.0, 95.0, 95.0, 0.5, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 95.0, 0.5, 0.5, 0.5, 0.5, 0.5, 5.0, 1.0, nan, 95.0, 5.0, 5.0, 95.0, 5.0, 0.5, 95.0, 5.0, nan, 95.0, 95.0, 5.0, 5.0, 95.0, 95.0, 95.0, 95.0, 95.0, 5.0, 95.0, 5.0, 5.0, 5.0, 95.0, 95.0, 95.0, 95.0, 95.0],
                     [95.0, 5.0, 5.0, 95.0, 95.0, 5.0, 0.5, 95.0, 95.0, 95.0, 1.0, 5.0, 95.0, 5.0, 95.0, 5.0, 95.0, 95.0, 0.5, 5.0, 1.0, 5.0, 0.5, 1.0, 0.5, nan, 95.0, 0.5, 5.0, 5.0, 0.5, 95.0, 95.0, 95.0, nan, 5.0, 95.0, 0.5, 5.0, 5.0, 5.0, 0.5, 0.5, 0.5, 0.5, 5.0, 5.0, 0.5, 0.5, 0.5, 95.0, 95.0, 5.0, 0.5],
                     [100.0, 95.0, 95.0, 95.0, 5.0, 95.0, 5.0, 95.0, 5.0, 95.0, 0.5, 0.5, 0.5, 0.5, 0.5, 5.0, 0.5, 95.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, nan, 0.5, 95.0, 1.0, 0.5, 0.5, 0.5, 0.5, 5.0, nan, 0.5, 95.0, 1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 5.0, 5.0, 5.0, 95.0, 0.5, 0.5, 95.0, 95.0, 5.0, 5.0]]
        self.assertTrue(np.allclose(vf_stats[[f"TDP{i}" for i in range(54)]].values*100, TDP_TRUTH, equal_nan=True))

        GH_TRUTH = [-1.988565, -2.139734, -1.365615]
        self.assertTrue(np.allclose(vf_stats["gh"], GH_TRUTH, atol=1e-3), msg="GH testcase failed")

        PD_TRUTH = [[-0.592941974,-2.121900586,-2.17210783,-0.743563706,-6.162466899,-8.170176878,-10.69913549,-6.749342734,-3.32079861,-4.413503118,-9.525931766,-24.01239311,-19.02010309,-17.54906171,-10.59926895,-29.17072483,-5.263429334,0.122617526,-7.683336577,-14.64854929,-3.13501064,-2.14272062,-2.671679232,-0.721886476,-2.293342352,np.nan,0,-4.078645414,-1.04385813,0.469680522,-0.538029457,-2.066988069,-0.117195313,-1.688651189,np.nan,-1.395308837,2.288141722,-0.198319626,-0.206029606,-0.734988218,0.214804538,-0.356651338,-1.449355846,-0.063308986,-2.139011086,-0.146721065,-3.675679677,-2.725886921,-1.297342797,1.609952695,-2.360103836,-2.889062448,-0.939269692,3.489274432],
                    [-1.241769313,-4.828335516,-4.864842809,-4.35129119,2.194003477,-1.942621637,-5.529187841,-1.565695134,-1.052143515,0.011467015,-5.045561728,-0.732245754,0.131129131,-1.455437072,-0.491944365,-3.978392746,-0.914782216,-0.301112775,-23.96046493,-2.197207865,-1.883891891,-1.020517006,-5.60708321,-1.643590502,-6.130038884,np.nan,-0.452758913,-15.33750797,-1.574250909,-0.260934935,-2.39756005,1.015873746,0.979366454,-0.507081927,np.nan,-3.829801956,0.823309141,-1.863374885,0,-1.586566204,-1.623073496,-7.109521877,-5.045911348,-6.432241906,-4.691211741,-1.827836856,-2.41440306,-3.450910353,-3.937358734,-9.873748204,-0.881070619,-1.467636823,-4.504144115,-10.9905925],
                    [7.668321425,3.096915114,0.056802571,0.547983796,-4.897299921,0,-3.571406311,-1.611518854,-3.120337629,1.902137365,-18.1694703,-5.803464148,-4.906164227,-6.477570538,-4.517683081,-6.026501856,-5.004026862,-1.4502581,-25.14818971,-26.31347733,-22.94747118,-30.05017126,-20.62157757,-30.66169011,-30.17050888,np.nan,-5.594265129,-0.530039545,-2.695327161,-3.329321009,-3.432021088,-4.003427399,-3.043539942,-3.552358717,np.nan,-7.976114961,0.684980205,-1.949013642,-5.051713722,-3.623120033,-3.663232576,-5.17205135,-6.149576357,-4.595807595,-2.806549078,-2.909249158,-3.480655469,-2.520768012,-3.029586786,-6.007111793,-0.004627396,-3.576033707,-2.61614625,-4.124965025],]
        self.assertTrue(np.allclose(vf_stats[[f"PD{i}" for i in range(54)]], PD_TRUTH, atol=1e-3, equal_nan=True), msg="PD testcase failed")

        PDP_TRUTH = [[95.0, 95.0, 95.0, 95.0, 0.5, 0.5, 0.5, 5.0, 95.0, 95.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 5.0, 95.0, 5.0, 0.5, 95.0, 95.0, 95.0, 95.0, 95.0, nan, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, nan, 95.0, 100.0, 95.0, 95.0, 95.0, 100.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 100.0],
                     [95.0, 95.0, 95.0, 95.0, 100.0, 95.0, 5.0, 95.0, 95.0, 95.0, 5.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 0.5, 95.0, 95.0, 95.0, 0.5, 95.0, 0.5, nan, 95.0, 0.5, 95.0, 95.0, 95.0, 100.0, 100.0, 95.0, nan, 95.0, 100.0, 95.0, 95.0, 95.0, 95.0, 0.5, 95.0, 1.0, 95.0, 95.0, 95.0, 95.0, 95.0, 0.5, 95.0, 95.0, 95.0, 0.5],
                     [100.0, 100.0, 95.0, 95.0, 5.0, 95.0, 95.0, 95.0, 95.0, 100.0, 0.5, 0.5, 0.5, 0.5, 95.0, 5.0, 5.0, 95.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, nan, 5.0, 95.0, 95.0, 95.0, 5.0, 5.0, 95.0, 95.0, nan, 1.0, 100.0, 95.0, 0.5, 95.0, 95.0, 5.0, 5.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 5.0, 95.0, 95.0, 95.0, 95.0]]
        self.assertTrue(np.allclose(vf_stats[[f"PDP{i}" for i in range(54)]].values*100, PDP_TRUTH, equal_nan=True))

        MD_TRUTH = [-6.110470, -5.085438, -8.523206]
        self.assertTrue(np.allclose(vf_stats["md"], MD_TRUTH, atol=1e-3))

        PSD_TRUTH = [6.610117, 3.971706, 9.265297]
        self.assertTrue(np.allclose(vf_stats["psd"], PSD_TRUTH, atol=1e-3))

    def test_vfi(self):
        vf_array = np.array([[24,23,23,24,20,19,17,21,24,22,17,4,10,12,19,0,23,27,18,13,26,28,28,30,28,16,28,22,27,30,30,29,31,29,0,27,30,29,30,30,31,30,28,28,26,29,26,27,28,30,25,25,27,31],
                             [22,19,19,19,27,24,21,25,25,25,20,26,28,27,28,24,26,25,0,24,26,28,24,28,23,17,26,9,25,28,27,31,31,29,0,23,27,26,29,28,28,22,23,20,22,26,26,25,24,17,25,25,22,15],
                             [32,28,25,25,21,27,24,26,24,28,8,22,24,23,25,23,23,25,0,1,6,0,10,0,0,23,22,25,25,26,27,27,28,27,0,20,28,27,25,27,27,25,23,23,25,26,26,27,26,22,27,24,25,23],
                             [26,26,28,27,28,29,28,27,29,27,21,29,31,29,29,31,28,26,10,26,11,21,0,0,0,29,27,0,0,0,0,0,31,28,20,29,5,0,28,29,28,25,25,27,12,22,11,26,25,26,0,18,25,24],
                             [3, 7, 0, 0, 3, 7, 8, 6, 6, 4, 1, 2, 3, 7, 7, 2, 8, 1, 0, 9, 8, 0, 6, 8, 3, 1, 3, 7, 9, 6, 1, 7, 7, 9, 3, 1, 7, 6, 7, 7, 7, 2, 1, 4, 0, 4, 1, 1, 9, 8, 6, 1, 9, 2]])
        age_array = np.array([53, 72, 67, 66, 90]).reshape(5, 1)
        VFI_TRUTH = [89.72188, 93.57302, 72.86794, 59.77338, 17.90212]

        model = pyvf.strategy.Model.Model(age=age_array,
                                          **pyvf.strategy.ModelDefaults.R_P24D2_PARAMETERS)
        vf_stats = model.get_vf_stats(vf=vf_array)
        self.assertTrue(np.allclose(vf_stats["vfi"], VFI_TRUTH, atol=1e-3))

    def test_vf_stats_sitas(self):
        vf_array = np.array([[30,29,26,25,27,27,27,29,29,27,27,30,31,30,29,29,28,27,25,27,29,29,30,31,31,25,28,26,29,29,28,30,29,31,8,29,26,28,29,29,30,29,30,28,27,31,27,28,30,29,33,27,27,30],
                             [19,20,21,16,19,21,14,18,20,15,1,12,17,-1,-1,-1,16,25,0,-1,4,-1,-1,30,10,20,27,23,23,27,30,29,30,31,-1,24,24,26,29,29,28,28,27,25,25,26,25,27,25,24,22,24,20,25,]])
        age_array = np.array([54, 76]).reshape(-1, 1)

        model = pyvf.strategy.Model.Model(age=age_array,
                                          **pyvf.strategy.ModelDefaults.SITAS_P24D2_PARAMETERS)
        vf_stats = model.get_vf_stats(vf=vf_array, psd_method="heijl")
        self.assertFalse(np.any(np.isnan(vf_stats.iloc[:, 1:25].values))) # First few columns should not involve blind spot so should not be nan

        # print(vf_stats)
        TRUTH = {
            "md": [-1.89, -10.17],
            "psd": [1.57, 11.57],
            "vfi": [99, 72],
            "ght": ["Within Normal Limits", "Outside Normal Limits"]
        }
        self.assertTrue(np.allclose(vf_stats["md"], TRUTH["md"], atol=0.2), msg="SITA-S MD failed")
        self.assertTrue(np.allclose(vf_stats["psd"], TRUTH["psd"], atol=0.5), msg="SITA-S PSD failed")
        self.assertTrue(np.allclose(vf_stats["vfi"], TRUTH["vfi"], atol=5), msg="SITA-S VFI failed")
        self.assertListEqual(vf_stats["ght"].to_list(), TRUTH["ght"], msg="SITA-S GHT failed")

    def test_wtd_var(self):
        x = [6, 11, 4, 4, 14, 15, 12, 16, 3, 15]
        weights = [0.09784223, 0.09801940, 0.08498750, 0.09202635, 0.09485238, 0.07505711, 0.06405586, 0.11555781, 0.10867336, 0.08966171]
        self.assertAlmostEqual(pyvf.strategy.Model.wtd_var(x, np.array(weights) * 10, normwt=False), 28.5156704291, places=6)
        self.assertAlmostEqual(pyvf.strategy.Model.wtd_var(x, weights, normwt=True), 28.3183944336, places=6)
        self.assertAlmostEqual(pyvf.strategy.Model.wtd_var(x, weights, normwt=True, method="ML"), 25.4186109894, places=6)
